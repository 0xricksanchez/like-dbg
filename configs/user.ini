[general]
# Architecture which is targeted
# Currently only x86_64 and arm64 is supported
arch = x86_64

[kernel_dl]
# IFF more than one specific version is set below the internal hierarchy prioritizes: mmp > tag > commit
# Pull a specific MAJOR.MINOR.PATCH version of the kernel, e.g. 5.15.67
mmp = 
# We can checkout a specific release tag like 5.15-rc2
tag = 
# Alternatively, we can grab a specific commit
# IFF mmp, tag, and commit are unset, we will automatically grab the latest available commit
commit = 

[kernel_builder_docker]
# Force to rebuild the container
force_rebuild = no

[kernel_builder]
# Compiler used for building the Linux kernel
compiler = gcc
# Apply all patches during build
# If one patch fails system stops
patch_dir = patches
# Mode specifies the kernel configuration.
# Currently 4 options are offered: generic, syzkaller, custom, or config
#   - generic: Builds a debuggable kernel version
#   - syzkaller: Adds more specific kernel configurations that are used for kernel fuzzing
#   - custom: Provide your own set of flags that you want to enable/disable below in 'enable_args' and 'disable_args'.
#             There is **no** need to specify the flags '-e'/'-d'
#   - config: Use a ready-made kernel config 
mode = generic
# IFF mode == config you can provide a full path to a usable kernel config for the requested arch. It will be copied into the kernel_root as ".config"
# Specified "extra_args" will still be honored. Any other arguments, e.g.: from "generic_args" will be ignored.
config = 
generic_args = -e DEBUG_KERNEL -e DEBUG_INFO -e DEBUG_INFO_DWARF4 -e FRAME_POINTER -e GDB_SCRIPTS -e KALLSYMS -e RELR -d DEBUG_INFO_DWARF5 -d DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT -d DEBUG_INFO_REDUCED -d DEBUG_INFO_COMPRESSED -d DEBUG_INFO_SPLIT -d RANDOMIZE_BASE -d DEBUG_EFI -d DEBUG_INFO_BTF -d SHADOW_CALL_STACK
syzkaller_args = -e DEBUG_FS -e DEBUG_INFO -e KALLSYMS -e KALLSYMS_ALL -e NAMESPACES -e UTS_NS -e IPC_NS -e PID_NS -e NET_NS -e USER_NS -e CGROUP_PIDS -e MEMCG -e CONFIGFS_FS -e SECURITYFS -e KASAN -e KASAN_INLINE -e WARNING -e FAULT_INJECTION -e FAULT_INJECTION_DEBUG_FS -e FAILSLAB -e FAIL_PAGE_ALLOC -e FAIL_MAKE_REQUEST -e FAIL_IO_TIMEOUT -e FAIL_FUTEX -e LOCKDEP -e PROVE_LOCKING -e DEBUG_ATOMIC_SLEEP -e PROVE_RCU -e DEBUG_VM -e REFCOUNT_FULL -e FORTIFY_SOURCE -e HARDENED_USERCOPY -e LOCKUP_DETECTOR -e SOFTLOCKUP_DETECTOR -e HARDLOCKUP_DETECTOR -e BOOTPARAM_HARDLOCKUP_PANIC -e DETECT_HUNG_TASK -e WQ_WATCHDOG --set-val DEFAULT_HUNG_TASK_TIMEOUT 140 --set-val RCU_CPU_STALL_TIMEOUT 100 -e UBSAN -d RANDOMIZE_BASE
# Enable these kernel flags during compilation
enable_args = DEBUG_KERNEL DEBUG_INFO FRAME_POINTER GDB_SCRIPTS KALLSYMS RELR DEBUG_INFO_DWARF4
# Disable these ones
disable_args = DEBUG_INFO_DWARF5 DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT DEBUG_INFO_REDUCED DEBUG_INFO_COMPRESSED DEBUG_INFO_SPLIT RANDOMIZE_BASE DEBUG_EFI DEBUG_INFO_BTF SHADOW_CALL_STACK
# Extra arguments regardless of selected mode. This allows overwriting already defined options
# Enable/Disable flags are needed here!
extra_args = 

[rootfs_general]

[rootfs_builder]
# Debian distribution release to base rootfs on
# compare: https://www.debian.org/releases/
distribution = bullseye
# Debian packages to install within the rootfs
packages = build-essential,vim,openssh-server,make,sudo,curl,tar,gcc,libc6-dev,time,strace,less,psmisc,selinux-utils,policycoreutils,checkpolicy,selinux-policy-default,firmware-atheros,openssl,plymouth,file
# Allows setting the hostname for some more customizability
hostname = LIKE-DBG
# Force to rebuild the container
force_rebuild = no

[debuggee_docker]
# Force to rebuild the container
force_rebuild = no

[debuggee]
# Amount of RAM
memory = 1024
# Number of cores
smp = 1
# Enable/Disable KVM support
# FIXME: Bug that I cannot set breakpoint on startup_64 on x86_64 kernels
kvm = no
# Enable/Disable the GDB stub
gdb = yes
# Enable/Disable KASLR
kaslr = no
# Enable/Disable SMEP
smep = yes
# Enable/Disable SMAP
smap = yes
# Enable/Disable KPTI
kpti = yes
# panic âˆˆ [reboot, halt, wait <seconds>]
#   - reboot: Immediate reboot when a kernel panic/oops happens
#   - halt: Wait forever
#   - wait <seconds>: Wait for the specified amount of seconds before rebooting
panic = halt


[debugger]
# Force to rebuild the container
force_rebuild = no
