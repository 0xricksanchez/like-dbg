[general]
# Directory where local ssh keys for the containers may be stored
ssh_dir = .ssh
# Architecture which is targeted
# Currently only x86_64 and arm64 is supported
arch = arm64
# The docker socket, which on UNIX systems defaults to the one below
docker_sock = unix://var/run/docker.sock
# Location where stuff is mounted within docker containers
docker_mnt = /io

[rootfs_general]
# Directory where the root file system will be build
rootfs_dir = io/
# file system base prefix
rootfs_base = filesystem-
# Optional: file system suffix
rootfs_ftype = 

[rootfs_builder]
# Docker image tag for the container that builds us a root file system that allows booting the kernel in QEMU
tag = like_rootfs
# Name of the dockerfile
dockerfile = .dockerfile_rootfs
# SSH forwarding port on our host system 
ssh_fwd_port = 2222
# Docker user
user = rootfs


[debuggee_docker]
# Docker image tag for the debug container
tag = like_debuggee
# Name of the dockerfile 
dockerfile = .dockerfile_dbge
# Docker user
user = debuggee

[debuggee]
# Amount of RAM
memory = 4096
# Number of cores
smp = 2
# Enable/Disable KVM support
# FIXME: Bug that I cannot set breakpoint on startup_64 on x86_64 kernels
kvm = no
# Enable/Disable the GDB stub
gdb = yes
# Enable/Disable KASLR
kaslr = no
# Enable/Disable SMEP
smep = yes
# Enable/Disable SMAP
smap = yes
# Enable/Disable KPTI
kpti = yes

[debugger]
# Docker image tag for the debug container
tag = like_debugger
# Name of the dockerfile 
dockerfile = .dockerfile_dbg
# Docker user
user = dbg

[kernel_general]
# Folder name the kernel source is unpacked into
kernel_root = kernel_root

[kernel_dl]
# URL that gets us the Linux kernel 
snap_uri = https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/snapshot/linux-
# URL to automatically resolve the latest commit 
commit_uri = https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/
mmp_uri = https://cdn.kernel.org/pub/linux/kernel/vKMAJOR.x/linux-KMAJOR.KMINOR.KPATCH.tar.xz
# Pull a specific MAJOR.MINOR.PATCH version of the kernel
# IFF more than one specific version is set here the internal hierarchy priotizes: mmp > tag > commit
mmp = 5.10.77
# We can checkout a specific release tag like 5.15-rc2
tag = 5.10-rc
# Alternatively, we can grab a specific commit
# IFF mmp, tag, and commit are unset, we will automatically grab the latest available commit
commit = 47700948a4abb4a5ae13ef943ff682a7f327547a

[kernel_builder_docker]
# Docker image tag for the container that builds us a root file system that allows booting the kernel in QEMU
tag = like_kbuilder
# Name of the dockerfile
dockerfile = .dockerfile_kbuilder
# SSH forwarding port on our host system 
ssh_fwd_port = 2223
# Docker user
user = kbuilder

[kernel_builder]
# Compiler used for building the Linux kernel
compiler = gcc
# Apply all patches during build
# If one patch fails system stops
patch_dir = patches
# Mode specifies the kernel configuration.
# Currently 2 options are offered: generic, syzkaller
#   - generic: Builds a debuggable kernel version
#   - syzkaller: Adds more specific kernel configurations that are used for kernel fuzzing
#   - custom: Provide your own set of flags that you want to enable/disable below in 'enable_args' and 'disable_args'.
#             There is **no** need to specify the flags '-e'/'-d'
mode = custom
generic_args = -e DEBUG_KERNEL -e DEBUG_INFO -e DEBUG_INFO_DWARF4 -e FRAME_POINTER -e GDB_SCRIPTS -e KALLSYMS -e RELR -d DEBUG_INFO_DWARF5 -d DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT -d DEBUG_INFO_REDUCED -d DEBUG_INFO_COMPRESSED -d DEBUG_INFO_SPLIT -d RANDOMIZE_BASE -d DEBUG_EFI -d DEBUG_INFO_BTF -d SHADOW_CALL_STACK
syzkaller_args = -e DEBUG_FS -e DEBUG_INFO -e KALLSYMS -e KALLSYMS_ALL -e NAMESPACES -e UTS_NS -e IPC_NS -e PID_NS -e NET_NS -e USER_NS -e CGROUP_PIDS -e MEMCG -e CONFIGFS_FS -e SECURITYFS -e KASAN -e KASAN_INLINE -e WARNING -e FAULT_INJECTION -e FAULT_INJECTION_DEBUG_FS -e FAILSLAB -e FAIL_PAGE_ALLOC -e FAIL_MAKE_REQUEST -e FAIL_IO_TIMEOUT -e FAIL_FUTEX -e LOCKDEP -e PROVE_LOCKING -e DEBUG_ATOMIC_SLEEP -e PROVE_RCU -e DEBUG_VM -e REFCOUNT_FULL -e FORTIFY_SOURCE -e HARDENED_USERCOPY -e LOCKUP_DETECTOR -e SOFTLOCKUP_DETECTOR -e HARDLOCKUP_DETECTOR -e BOOTPARAM_HARDLOCKUP_PANIC -e DETECT_HUNG_TASK -e WQ_WATCHDOG --set-val DEFAULT_HUNG_TASK_TIMEOUT 140 --set-val RCU_CPU_STALL_TIMEOUT 100 -e UBSAN -d RANDOMIZE_BASE
# Enable these kernel flags during compilation
enable_args = DEBUG_KERNEL DEBUG_INFO FRAME_POINTER GDB_SCRIPTS KALLSYMS RELR
# Disable these ones
disable_args = DEBUG_INFO_DWARF5 DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT DEBUG_INFO_REDUCED DEBUG_INFO_COMPRESSED DEBUG_INFO_SPLIT RANDOMIZE_BASE DEBUG_EFI DEBUG_INFO_BTF SHADOW_CALL_STACK
# Extra arguments regardless of selected mode. This allows overwriting already defined options
extra_args = 
